---  java 中实现多线程的三种方式
1 继承Thread
2 实现Runable接口
3 实现callable接口 （返回future对象）


---  线程调度  线程优先级
Java中线程的优先级是用整数来表示的，取值范围是1-10
　　Thread类中有三个静态常量：
　　static int MAX_PRIORITY
　　线程可以具有的最高优先级，取值为10。
　　static int MIN_PRIORITY
　　线程可以具有的最低优先级，取值为1。
　　static int NORM_PRIORITY
   分配给线程的默认优先级，取值为5。

可以用Thread类的setPriority和getPriority方法分别来设置和获取线程的优先级
线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。

---  常用方法归纳
Thread.sleep(long millis) —— 线程睡眠
Thread.yield() —— 线程让步
join —— 等待线程终止   应用场景是当一个线程必须等待另一个线程执行完毕才能执行时，Thread类提供了join方法来完成这个功能
interrupt()  它只是向线程发送一个中断信号，让线程在无限等待时（如死锁时）能抛出抛出，从而结束线程，但是如果你吃掉了这个异常，那么这个线程还是不会中断的！

sleep(): 强迫一个线程睡眠Ｎ毫秒。 
isAlive(): 判断一个线程是否存活。 
join(): 等待线程终止。 
activeCount(): 程序中活跃的线程数。 
enumerate(): 枚举程序中的线程。 
currentThread(): 得到当前线程。 
isDaemon(): 一个线程是否为守护线程。 
setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束) 
setName(): 为线程设置一个名称。 
wait(): 强迫一个线程等待。 
notify(): 通知一个线程继续运行。 
setPriority(): 设置一个线程的优先级。


